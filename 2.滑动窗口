一、Python
1.第3题
设置两个指针i和j，以及用来记最常非重复子串的list。开始的时候，j往后移动，如果j代表的字母不在记录中，则加入记录中；否则，break。此时得到子串长度，
和以前的长度进行比较，取较大的那个。i往后移，并且删除记录中i代表的字母。

class Solution(object):
    def lengthOfLongestSubstring(self, s):
        """
        :type s: str
        :rtype: int
        """
        count = 0
        record = []
        
        i = j = 0
        
        while j<len(s):
            while j<len(s):
                if s[j] in record:
                    break
                else:
                    record.append(s[j])
                    j += 1

            count = max(count,j-i)
            record.remove(s[i])

            i += 1
            
        return count

2.第11题
总的来说，这个窗口是连续的。最开始的窗口为数组的大小，窗口不断缩小，那么是从那边往里缩小呢？装水有是看两边木板的最小值，所以两边木板，哪个小就移动哪个。
每次致力于比上次更长的木板。

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        i,j = 0,len(height)-1
        maxarea = 0
        
        while i < j:
            area = (j-i)*min(height[i],height[j])
            if area > maxarea:
                maxarea = area
            if height[i] < height[j]:
                i += 1
            else:
                j -= 1
        return maxarea
3.152题
设置两个变量，分别记录到当前位置能获得的最大值（index_max）和最小值（index_max）；以及总的变量答案res，每次从res、index_max、index_min中取最大值。
如果当前位置的值小于0，交换index_max和index_min的值。
index_max的更新：index_max的值乘上当前值or当前值；index_min的更新：index_min的值乘上当前值or当前值。
class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if len(nums)==0:
            return 0
        
        index_max = 1
        index_min = 1
        res = nums[0]
        
        for i in range(len(nums)):
            if nums[i]<0:
                index_max,index_min = index_min,index_max
                
            index_max = max(index_max*nums[i],nums[i])
            index_min = min(index_min*nums[i],nums[i])
            
            res = max(res,index_max,index_min)
            
        return res

