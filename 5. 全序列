1.第46题
使用递归，挨个把其中的元素当作第一个元素。
class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        
        self.func(nums,[],res,len(nums))
        
        return res
    
    def func(self,nums,path,res,n):
        if len(path) == n:
            res.append(path)
            return
        
        for i in range(len(nums)):
            self.func(nums[:i]+nums[i+1:],path+[nums[i]],res,n)
2.第47题
和46题解法一样，在加入答案的时候要判断是否已经包含在答案中。
class Solution(object):
    def permuteUnique(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res = []
        
        self.func(nums,[],res,len(nums))
        
        return res
    
    def func(self,nums,path,res,n):
        if len(path) == n:
            if path not in res:
                res.append(path)
            return
        
        for i in range(len(nums)):
            self.func(nums[:i]+nums[i+1:],path+[nums[i]],res,n)
3.第78题
数组中没有重复的，进行排序，然后加入的条件是大于子数组的最后一个
class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        res = [[]]
        l = len(nums)
        
        for length in range(1,l+1)[::-1]:
            for sub in res:
                if len(sub)==0 and len(sub)==l-length:
                    for j in range(0,l):
                        res.append(sub+[nums[j]])
                    continue
                if len(sub)==l-length:
                    for j in range(l-length,l):
                        if nums[j]>sub[-1]:
                            res.append(sub+[nums[j]])

        return res
        
4.第90题
对数组进行排序，这样就可以把重复的放在一块了，初始化返回值为[[]]。对于数组中的每个数字，往返回值里面的每一个已有答案加入，如果答案中不存在，就加入。
class Solution(object):
    def subsetsWithDup(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        nums.sort()
        
        res = [[]]
        
        for i in range(len(nums)):
            this_time = []
            for sub in res:
                temp = sub+[nums[i]]
                if temp not in res:
                    this_time.append(temp)
            res += this_time  
                    
        return res
